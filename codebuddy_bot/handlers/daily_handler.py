from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from database.models import SessionLocal, User
from datetime import datetime
import json
import os

current_dir = os.path.dirname(os.path.abspath(__file__))
questions_path = os.path.join(current_dir, '..', 'data', 'daily_questions.json')

if not os.path.exists(questions_path):
    print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {questions_path}")
    questions = []
else:
    try:
        with open(questions_path, 'r', encoding='utf-8') as f:
            questions = json.load(f)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(questions)} –ø–∏—Ç–∞–Ω—å")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON: {e}")
        questions = []

daily_router = Router()


@daily_router.message(Command('daily'))
async def daily_handler(message: Message):
    print(f"üîî –û—Ç—Ä–∏–º–∞–Ω–æ /daily –≤—ñ–¥ user_id: {message.from_user.id}")

    db = SessionLocal()
    try:
        user_id = message.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ë–î")
            await message.answer('‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω–∏ –∑ /start')
            return

        today = datetime.utcnow().date()
        print(f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {today}, –æ—Å—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {user.daily_answered}")

        if user.daily_answered and user.daily_answered.date() == today:
            print("‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ")
            await message.answer('‚ñ† –¢–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ!')
            return

        if not questions:
            print("‚ùå –ù–µ–º–∞—î –ø–∏—Ç–∞–Ω—å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
            await message.answer('‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å')
            return

        q_index = user.streak % len(questions)
        q = questions[q_index]
        print(f"‚úÖ –û–±—Ä–∞–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è ID: {q['id']}, —ñ–Ω–¥–µ–∫—Å: {q_index}")

        buttons = []
        print(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–Ω–æ–ø–∫–∏ –∑ callback_data:")
        for i, opt in enumerate(q['options']):
            callback_data = f"daily_{q['id']}_{i}"
            print(f"   {i}. {opt} ‚Üí {callback_data}")
            buttons.append([InlineKeyboardButton(
                text=opt,
                callback_data=callback_data
            )])

        text = (
            f'‚ñ† –©–æ–¥–µ–Ω–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n\n'
            f"{q['question']}\n\n"
            f"```python\n{q['code']}\n```"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        print("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è")
    finally:
        db.close()


@daily_router.callback_query(F.data.startswith('daily_'))
async def daily_callback_handler(query: CallbackQuery):
    print(f"üîî Callback –æ—Ç—Ä–∏–º–∞–Ω–æ: {query.data}")
    await query.answer()

    db = SessionLocal()
    try:
        data_parts = query.data.split('_')
        print(f"üìä –†–æ–∑–¥—ñ–ª–µ–Ω—ñ –¥–∞–Ω—ñ: {data_parts}")

        if len(data_parts) < 3:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            await query.answer("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É", show_alert=True)
            return

        qid = data_parts[1]
        selected = int(data_parts[2])
        user_id = query.from_user.id

        print(f"üìä ID –ø–∏—Ç–∞–Ω–Ω—è: {qid}, –æ–±—Ä–∞–Ω–æ: {selected}, user: {user_id}")

        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            await query.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        q = None
        for question in questions:
            if str(question['id']) == qid:
                q = question
                break

        if not q:
            print(f"‚ùå –ü–∏—Ç–∞–Ω–Ω—è –∑ ID {qid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            await query.answer("–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        correct = q['answer']
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: –æ–±—Ä–∞–Ω–æ {selected}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ {correct}")

        if selected == correct:
            result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
            user.streak += 1
            user.xp += 10
            print(f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–æ–≤–∏–π streak: {user.streak}, XP: {user.xp}")
        else:
            result = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {q['options'][correct]}"
            user.streak = 0
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. Streak —Å–∫–∏–Ω—É—Ç–æ")

        user.daily_answered = datetime.utcnow()
        db.commit()
        print("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ")

        explanation = (
            f"üìù –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {q['explanation']}\n\n"
            f"üíª –ö–æ–¥:\n```python\n{q['code']}\n```"
        )

        await query.message.edit_text(
            text=f"{result}\n\n{explanation}",
            parse_mode='Markdown',
            reply_markup=None
        )
        print("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ", show_alert=True)
    finally:
        db.close()


@daily_router.message(Command("test_daily"))
async def test_daily(message: Message):
    print("üß™ –¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ test_daily –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    await message.answer("‚úÖ Daily handler –ø—Ä–∞—Ü—é—î! –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ")


@daily_router.message(Command("simple_test"))
async def simple_test(message: Message):
    button = InlineKeyboardButton(text="–ù–∞—Ç–∏—Å–Ω–∏ –º–µ–Ω–µ!", callback_data="simple_test_123")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    await message.answer("–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboard)
    print("üß™ –ü—Ä–æ—Å—Ç—ñ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")


@daily_router.callback_query(F.data.startswith('simple_test_'))
async def simple_test_handler(query: CallbackQuery):
    await query.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞—Ü—é—î!", show_alert=True)
    print(f"üéâ –ü—Ä–æ—Å—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞: {query.data}")