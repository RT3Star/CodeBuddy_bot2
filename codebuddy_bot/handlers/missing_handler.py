from aiogram.types import Message
from database.models import SessionLocal, User
from datetime import datetime, timedelta


async def missing(message: Message):
    db = SessionLocal()
    try:
        user_id = message.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –∑ /start")
            return

        today = datetime.utcnow().date()

        if user.daily_answered:
            last_answered_date = user.daily_answered.date()
            days_missing = (today - last_answered_date).days - 1

            if days_missing > 0:
                msg = f"üìÖ –í–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days_missing} –¥–Ω—ñ(–≤)"
            else:
                msg = "‚úÖ –í–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è!"
        else:
            msg = "üìÖ –í–∏ —â–µ –Ω–µ –ø–æ—á–∏–Ω–∞–ª–∏ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –ü–æ—á–Ω—ñ—Ç—å –∑ /daily"

        await message.answer(msg)

    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        db.close()


from aiogram import Router, F

missing_router = Router()


@missing_router.message(F.text == "/missing")
async def missing_handler(message: Message):
    await missing(message)