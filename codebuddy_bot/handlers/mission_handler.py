from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F
from database.models import SessionLocal, User
import random


async def mission(message: Message):
    db = SessionLocal()
    try:
        user_id = message.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –∑ /start")
            return

        missions = [
            "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –æ–±—á–∏—Å–ª—é—î —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —á–∏—Å–ª–∞",
            "–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            "–ù–∞–ø–∏—à–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó",
            "–†–µ–∞–ª—ñ–∑—É–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –±—É–ª—å–±–∞—à–∫–æ—é",
            "–°—Ç–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ Python",
            "–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∏",
            "–†–µ–∞–ª—ñ–∑—É–π –≥—Ä—É '–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ'",
            "–°—Ç–≤–æ—Ä–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å",
            "–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è —Å–≤–æ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó",
            "–û–ø—Ç–∏–º—ñ–∑—É–π —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        ]

        selected_mission = random.choice(missions)

        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –º—ñ—Å—ñ—é", callback_data="mission_accept")],
            [InlineKeyboardButton(text="üîÅ –Ü–Ω—à–∞ –º—ñ—Å—ñ—è", callback_data="mission_another")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            f"üéØ –ú—ñ—Å—ñ–π–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n{selected_mission}",
            reply_markup=reply_markup
        )

    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—ñ—Å—ñ—ó")
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        db.close()


async def handle_mission_callback(query: CallbackQuery):
    await query.answer()

    if query.data == "mission_accept":
        await query.message.answer("üéâ –ú—ñ—Å—ñ—é –ø—Ä–∏–π–Ω—è—Ç–æ! –£—Å–ø—ñ—Ö—ñ–≤ —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ! üí™")
    elif query.data == "mission_another":
        await mission(query.message)


mission_router = Router()


@mission_router.message(F.text == "/mission")
async def mission_handler(message: Message):
    await mission(message)


@mission_router.callback_query(lambda c: c.data.startswith("mission_"))
async def mission_callback_handler(callback_query: CallbackQuery):
    await handle_mission_callback(callback_query)