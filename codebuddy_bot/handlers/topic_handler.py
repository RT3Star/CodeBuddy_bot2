from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from database.models import SessionLocal, User
import json
import os

topic_router = Router()

current_dir = os.path.dirname(os.path.abspath(__file__))
topics_path = os.path.join(current_dir, '..', 'data', 'topics.json')
topic_tasks_path = os.path.join(current_dir, '..', 'data', 'topic_tasks.json')

try:
    with open(topics_path, 'r', encoding='utf-8') as f:
        TOPICS = json.load(f)
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(TOPICS)} —Ç–µ–º")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è topics.json: {e}")
    TOPICS = ["Lambda", "List comprehension", "Decorators"]

try:
    with open(topic_tasks_path, 'r', encoding='utf-8') as f:
        TOPIC_TASKS = json.load(f)
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è {len(TOPIC_TASKS)} —Ç–µ–º")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è topic_tasks.json: {e}")
    TOPIC_TASKS = {}


@topic_router.message(Command("topics"))
async def show_topics(message: Message, state: FSMContext):
    keyboard = []
    for topic in TOPICS:
        keyboard.append([InlineKeyboardButton(text=topic, callback_data=f"topic:{topic}")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = "üìö –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:\n\n"
    for i, topic in enumerate(TOPICS, 1):
        text += f"{i}. {topic}\n"

    await message.answer(text, reply_markup=reply_markup)


@topic_router.message(Command("topic"))
async def topic_command(message: Message):
    await show_topics(message, state=None)


@topic_router.callback_query(F.data.startswith("topic:"))
async def topic_selected(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    topic = callback.data.split(':', 1)[1]

    db = SessionLocal()
    try:
        user_id = callback.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.current_topic = topic
            db.commit()
            print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ —Ç–µ–º—É: {topic}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–º–∏: {e}")
    finally:
        db.close()

    if topic in TOPIC_TASKS:
        task_count = sum(len(tasks) for tasks in TOPIC_TASKS[topic].values())
        message_text = (
            f"üéØ –¢–µ–º–∞ \"{topic}\" –æ–±—Ä–∞–Ω–∞!\n\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {task_count}\n\n"
            f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å —Ü—ñ—î—ó —Ç–µ–º–∏:\n"
            f"‚Ä¢ /task - –≤–∏–ø–∞–¥–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            f"‚Ä¢ /task_easy - –ª–µ–≥–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            f"‚Ä¢ /task_medium - —Å–µ—Ä–µ–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            f"‚Ä¢ /task_hard - —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"
        )
    else:
        message_text = (
            f"üéØ –¢–µ–º–∞ \"{topic}\" –æ–±—Ä–∞–Ω–∞!\n\n"
            f"‚ö†Ô∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ç–µ–º—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /topics"
        )

    await callback.message.answer(message_text)


@topic_router.message(Command("current_topic"))
async def current_topic(message: Message):
    db = SessionLocal()
    try:
        user_id = message.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if user and user.current_topic:
            topic = user.current_topic
            if topic in TOPIC_TASKS:
                task_count = sum(len(tasks) for tasks in TOPIC_TASKS[topic].values())
                response = (
                    f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–∞: {topic}\n"
                    f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {task_count}\n\n"
                    f"–î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:\n"
                    f"‚Ä¢ /task - –≤–∏–ø–∞–¥–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
                    f"‚Ä¢ /task_easy - –ª–µ–≥–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
                    f"‚Ä¢ /task_medium - —Å–µ—Ä–µ–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
                    f"‚Ä¢ /task_hard - —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n\n"
                    f"–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É: /topics"
                )
            else:
                response = (
                    f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–∞: {topic}\n\n"
                    f"‚ö†Ô∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏.\n"
                    f"–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É: /topics"
                )
        else:
            response = (
                "üìä –í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ —Ç–µ–º—É.\n\n"
                "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /topics"
            )

        await message.answer(response)
    except Exception as e:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–µ–º–∏")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        db.close()