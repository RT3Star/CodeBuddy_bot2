from aiogram.types import Message
from database.models import Badge, UserBadge, User, SessionLocal
from aiogram import Bot


async def check_and_award_badges(session, user, bot: Bot):
    earned = []
    if user.completed_tasks >= 10:
        earned.append("Task Slayer")
    if user.streak >= 5:
        earned.append("Streak Master")
    if user.streak >= 10:
        earned.append("Python Champion")

    for name in earned:
        badge = session.query(Badge).filter(Badge.name == name).first()
        if not badge:
            continue

        exists = session.query(UserBadge).filter(
            UserBadge.user_id == user.user_id,
            UserBadge.badge_id == badge.badge_id
        ).first()

        if not exists:
            ub = UserBadge(user_id=user.user_id, badge_id=badge.badge_id)
            session.add(ub)
            session.commit()

            try:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üéâ –í—ñ—Ç–∞—é! –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –Ω–æ–≤–∏–π –±–µ–π–¥–∂: *{badge.name}*",
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –±–µ–π–¥–∂: {e}")


async def get_user_stats(message: Message):
    db = SessionLocal()
    try:
        user_id = message.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –∑ /start")
            return

        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
            f"üÜî ID: {user.user_id}\n"
            f"üë§ –Ü–º'—è: {user.name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {user.completed_tasks}\n"
            f"üî• –°–µ—Ä—ñ—è: {user.streak} –¥–Ω—ñ–≤\n"
            f"‚≠ê XP: {user.xp}\n"
            f"üìà –†—ñ–≤–µ–Ω—å: {user.level}\n"
            f"üéØ –ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–∞: {user.current_topic or '–ù–µ –æ–±—Ä–∞–Ω–∞'}"
        )

        await message.answer(stats_text)

    except Exception as e:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        db.close()


from aiogram import Router, F

user_router = Router()


@user_router.message(F.text == "/user_stats")
async def user_stats_handler(message: Message):
    await get_user_stats(message)